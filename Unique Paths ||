class Solution {
public:
    bool isValid(vector<vector<int>>& obstacleGrid,int x,int y,int m,int n){
        if(x<m && y<n && obstacleGrid[x][y]!=1){
            return true;
        }
        return false;
    }
    int helper(vector<vector<int>>& obstacleGrid,vector<vector<int>>&dp,int x,int y,int m,int n){
        if(x==m-1 && y==n-1)
            return 1;
        
        if(isValid(obstacleGrid,x,y,m,n)){
              if(dp[x][y]!=-1)
                return dp[x][y];

            return dp[x][y]=helper(obstacleGrid,dp,x+1,y,m,n) + helper(obstacleGrid,dp,x,y+1,m,n); 
        }

        return 0;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        if(obstacleGrid[m-1][n-1]==1)
            return 0;
        if(obstacleGrid[0][0]==1)
            return 0;
        return helper(obstacleGrid,dp,0,0,m,n);
    }
};
